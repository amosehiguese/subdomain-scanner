plugins {
    id 'application'
    id 'com.google.protobuf' version '0.9.4'
    id 'idea'
}

repositories {
    maven {
        url "https://maven-central.storage-download.googleapis.com/maven2/" }
    mavenCentral()
    mavenLocal()
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(21))
    }
}

def grpcVersion = '1.63.0' 
def protobufVersion = '3.25.1'
def protocVersion = protobufVersion

dependencies {
    implementation "io.grpc:grpc-protobuf:${grpcVersion}"
    implementation "io.grpc:grpc-services:${grpcVersion}"
    implementation "io.grpc:grpc-stub:${grpcVersion}"
    compileOnly "org.apache.tomcat:annotations-api:6.0.53"
    implementation "org.apache.logging.log4j:log4j-core:2.23.1"
     // Telemetry
    implementation "io.opentelemetry:opentelemetry-api:1.38.0"
    implementation "io.opentelemetry:opentelemetry-sdk:1.38.0"
    implementation "io.opentelemetry:opentelemetry-exporter-otlp:1.38.0"
    implementation "io.opentelemetry.instrumentation:opentelemetry-grpc-1.6"
    
    // Alpha module
    implementation "io.opentelemetry.semconv:opentelemetry-semconv:1.21.0-alpha"
    implementation "io.opentelemetry.instrumentation:opentelemetry-grpc-1.6:1.32.0-alpha"


    // examples/advanced need this for JsonFormat
    implementation "com.google.protobuf:protobuf-java-util:${protobufVersion}"

    runtimeOnly "io.grpc:grpc-netty-shaded:${grpcVersion}"

    testImplementation "io.grpc:grpc-testing:${grpcVersion}"
    testImplementation "io.grpc:grpc-inprocess:${grpcVersion}"
    testImplementation "junit:junit:4.13.2"
    testImplementation "org.mockito:mockito-core:4.4.0"
}

protobuf {
    protoc { artifact = "com.google.protobuf:protoc:${protocVersion}" }
    plugins {
        grpc { artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}" }
    }
    generateProtoTasks {
        all()*.plugins { grpc {} }
    }
}

// Inform IDEs like IntelliJ IDEA, Eclipse or NetBeans about the generated code.
sourceSets {
    main {
        java {
            srcDirs 'build/generated/source/proto/main/grpc/com/dnsresolvesvc'
            srcDirs 'build/generated/source/proto/main/java/com/dnsresolvesvc'
        }
    }
}

startScripts.enabled = false

// Creates start scripts for a class name and adds it to the distribution. The
// base class name is used to name the task and scripts. For example, passed
// the class io.grpc.examples.helloworld.HelloWorldClient, it creates the task
// helloWorldClient with script name hello-world-client.
def createStartScripts(String mainClassName) {
    String bareName = mainClassName.substring(mainClassName.lastIndexOf('.') + 1);
    String taskName = bareName.uncapitalize();
    def newTask = tasks.register(taskName, CreateStartScripts) {
        mainClass = mainClassName
        applicationName = taskName.replaceAll('([A-Z])') { '-' + it[0].uncapitalize() }
        outputDir = new File(project.buildDir, 'tmp/scripts/' + name)
        classpath = startScripts.classpath
    }
    application {
        applicationDistribution.into('bin') {
            from(newTask)
            fileMode = 0755
        }
    }
}

createStartScripts('com.dnsresolvesvc.DnsResolveService.java')