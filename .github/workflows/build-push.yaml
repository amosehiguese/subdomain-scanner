name: "Subdomain Enumeration CD"
on:
  workflow_call:
  workflow_dispatch:
env:
  REGISTRY: ghcr.io
  REPO: ${{ github.repository }}
  CLUSTERNAME: SubdomainScanner
  ECS_TASK_DEFINITION: subdomain
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        services: ["apiquerysvc", "brutesvc", "dnsresolvesvc", "frontend", "portscansvc"]
    environment: production
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@v3.5.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.REPO }}/${{ matrix.services }}
          tags: |
            type=raw,value=${{ github.sha }}
            type=sha
            type=ref,event=branch
            
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
        with:
          context: './src/${{ matrix.services }}'
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Sign the published Docker image
        if: ${{ github.event_name != 'pull_request' }}
        env:
          TAGS: ${{ steps.meta.outputs.tags }}
          DIGEST: ${{ steps.build-and-push.outputs.digest }}

        run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_GITHUB_ROLE }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Verify AWS authentication
        run: aws sts get-caller-identity

      - name: Download task definition
        run: |
          aws ecs describe-task-definition \
          --task-definition $ECS_TASK_DEFINITION \
          --query taskDefinition \
          --region ${{ vars.AWS_REGION }} > ../../task-definition.json
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ matrix.service }}
          image: ${{ env.REGISTRY }}/${{ env.REPO }}/${{ matrix.service }}:${{ github.sha }}

      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          service: ${{ matrix.service }}
          cluster: ${{ env.CLUSTERNAME }}
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          wait-for-service-stability: true



      
