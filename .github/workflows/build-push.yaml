name: "Subdomain Enumeration CD"

on:
  workflow_call:
  workflow_dispatch:

env:
  CLUSTERNAME: SubdomainScanner
  ECS_TASK_DEFINITION: subdomain-scanner

jobs:
  deploy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        services: ["apiquerysvc", "brutesvc", "dnsresolvesvc", "frontend", "portscansvc"]
    environment: production
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_GITHUB_ROLE }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set environment variables
        id: vars
        run: |
          echo "AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)" >> $GITHUB_ENV
          echo "ECR_REGISTRY=${AWS_ACCOUNT_ID}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com" >> $GITHUB_ENV
          echo "IMAGE_TAG=${{ github.sha }}" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./src/${{ matrix.services }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ env.ECR_REGISTRY }}/${{ matrix.services }}:${{ env.IMAGE_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Download current ECS task definition
        run: |
          aws ecs describe-task-definition \
            --task-definition $ECS_TASK_DEFINITION \
            --region ${{ vars.AWS_REGION }} \
            --query taskDefinition \
            > task-definition.json

      - name: Fill in new image in ECS task definition
        id: render-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ matrix.services }}
          image: ${{ env.ECR_REGISTRY }}/${{ matrix.services }}:${{ env.IMAGE_TAG }}

      - name: Deploy to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          service: ${{ matrix.services }}
          cluster: ${{ env.CLUSTERNAME }}
          task-definition: ${{ steps.render-task-def.outputs.task-definition }}
          wait-for-service-stability: true
