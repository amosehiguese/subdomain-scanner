{{- if .Values.frontend.create }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.frontend.name }}
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    matchLabels:
      app: {{ .Values.frontend.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.frontend.name }}
    spec:
      terminationGracePeriodSeconds: 5
      securityContext:
        fsGroup: 1000
        runAsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
      containers:
      - name: server
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
          privileged: false
          readOnlyRootFilesystem: true
        image: {{ .Values.images.repository }}/{{ .Values.frontend.name }}:{{ .Values.images.tag }}
        ports:
        - containerPort: {{ .Values.frontend.port }}
        env:
        - name: PORT
          value: {{ .Values.frontend.port }}
        - name: APIQUERY_SERVICE_ADDR
          value: "{{ .Values.apiQuerySvc.name }}:{{ .Values.apiQuerySvc.port }}"
        - name: BRUTE_FORCE_SERVICE_ADDR
          value: "{{ .Values.bruteSvc.name }}:{{ .Values.bruteSvc.port }}"
        - name: DNS_RESOLVE_SERVER_ADDR
          value: "{{ .Values.dnsResolveSvc.name }}:{{ .Values.dnsResolveSvc.port }}"
        - name: PORT_SCAN_SERVICE_ADDR
          value: "{{ .Values.portScanSvc.name }}:{{ .Values.portScanSvc.port }}"
        - name: TRACING_ENABLED
          value: "{{ .Values.frontend.enableTracing }}"
        {{- if .Values.oTelCollector.create -}}
        - name: OTEL_COLLECTOR_ADDR
          values: "{{ .Values.oTelCollector.name }}:{{ .Values.oTelCollector.port }}"
        - name: OTEL_SERVICE_NAME
          values: "{{ .Values.frontend.name }}"
        {{- end }}

        resources:
          {{- toYaml .Values.frontend.resources | nindent 10 -}}
        readinessProbe:
          initialDelaySeconds: 10
          httpGet:
            path: "/_healthz"
            port: {{ .Values.frontend.port }}
        livenessProbe:
          initialDelaySeconds: 20
          httpGet:
            path: "/_healthz"
            port: {{ .Values.frontend.port }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.frontend.name }}
  namespace: {{ .Release.Namespace }}
spec:
  type: ClusterIP
  selector:
    app: {{ .Values.frontend.name }}
  ports:
  - name: http
    port: 80
    targetPort: {{ .Values.frontend.port }}

{{- if .Values.frontend.external }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.frontend.name }}-external
  namespace: {{ .Release.Namespace }}
spec:
  type: LoadBalancer
  selector:
    app: {{ .Values.frontend.name }}
  ports:
  - name: http
    port: 80
    targetPort: 8080
{{- end }}
{{- if .Values.networkPolicies.create }}
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: {{ .Values.frontend.name }}
  namespace: {{ .Release.Namespace }}
spec:
  podSelector:
    matchLabels:
      app: {{ .Values.frontend.name }}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: {{ .Values.frontend.name }}
    ports:
    - port: {{ .Values.frontend.port }}
      protocol: TCP
  egress:
  - {}
{{- end }}
{{- end }}
